package utility;
import entity.living.livingEntity;
import net.slashie.libjcsi.CharKey;
import net.slashie.libjcsi.ConsoleSystemInterface;
import net.slashie.libjcsi.CSIColor;
import net.slashie.libjcsi.textcomponents.*;

//This is a special entity controller specifically for player entities. Here we will have a bunch of methods for actions the player can take.
public class playerController extends entityController{
	
	private boolean quit=false;
	
	//Oddly formatted autogenerated constructor???
	public playerController(livingEntity tempPuppet) {
		super(tempPuppet);
	}
	
	//Method handles input using the control system interface that is being used in the main loop.
	//The 
	public void movePupet(ConsoleSystemInterface csi){
		System.out.println("Awaiting Key");
		CharKey keyPress = csi.inkey();
		System.out.println("Key Recieved");
		if(keyPress.isUpArrow() && puppet.getY()-1>=0){
			puppet.moveY(-1);
		}
		if(keyPress.isDownArrow() && puppet.getY()+1<25){
			puppet.moveY(1);
		}
		if(keyPress.isLeftArrow() && puppet.getX()-1>=0){
			puppet.moveX(-1);
		}
		if(keyPress.isRightArrow() && puppet.getX()+1<80){
			puppet.moveX(1);
		}
		if(keyPress.isDownLeftArrow() && puppet.getY()+1<25 && puppet.getX()-1>=0){
			puppet.moveX(-1);
			puppet.moveY(1);
		}
		if(keyPress.isUpLeftArrow() && puppet.getY()-1>=0 && puppet.getX()-1>=0){
			puppet.moveX(-1);
			puppet.moveY(-1);
		}
		if(keyPress.isDownRightArrow() && puppet.getY()+1<25 && puppet.getX()+1<80){
			puppet.moveX(1);
			puppet.moveY(1);
		}
		if(keyPress.isUpRightArrow() && puppet.getY()-1>=0 && puppet.getX()+1<79){
			puppet.moveX(1);
			puppet.moveY(-1);
		}
		if(keyPress.code==CharKey.Q){
			setQuit(true);
		}
		if(keyPress.code==CharKey.QUESTION){
			TextBox helpBox = new TextBox(csi);
			
			helpBox.setWidth(20);
			helpBox.setHeight(10);
			helpBox.setBorder(true);
			helpBox.setPosition(0, 0);
			helpBox.setText("Use the numpad to move around. Press 'Q' to quit. Press '?' for help. Press '[space]' to close.");
			helpBox.draw();
			csi.refresh();
			csi.waitKey(CharKey.SPACE);
		}
	}
		


	public boolean isQuit() {
		return quit;
	}
	
	//Temporary quit function.
	public void setQuit(boolean quit) {
		this.quit = quit;
	}
	
	
}

